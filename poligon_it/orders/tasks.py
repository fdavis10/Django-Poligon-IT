from celery import shared_task
from django.core.exceptions import ObjectDoesNotExist
from .models import Order, OrderItem
from tg_bot.bot_scrypt import send_telegram_message
from tg_bot.models import TelegramUser
from django.core.mail import EmailMessage
from django.conf import settings
from io import BytesIO
import time
import requests
import os



@shared_task(bind=True, max_retries=5)
def send_order_email_task(self, order_id):
    from .views import generate_order_excel

    try:
        for i in range(5):
            try:
                order = Order.objects.get(id=order_id)
                break
            except Order.DoesNotExist:
                print(f"–ó–∞–∫–∞–∑ {order_id} –µ—â–µ –Ω–µ –≤ –±–∞–∑–µ, –ø–æ–ø—ã—Ç–∫–∞ {i+1}/5")
                time.sleep(2)
        else:
            print(f'–ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫!')
            return

        order_items = order.items.all()
        excel_file = generate_order_excel(order, order_items)

        subject = f'–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order.id} –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω!'
        message = (
            f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {order.first_name}!\n\n'
            f'–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order.id} –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω. –¢–∞–±–ª–∏—Ü–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏ –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏.\n'
            f'–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É!'
        )

        recipient_list = [order.email]

        email = EmailMessage(
            subject=subject,
            body=message,
            from_email=settings.DEFAULT_FROM_EMAIL,
            to=recipient_list,
        )

        email.attach(f'–ó–∞–∫–∞–∑_{order.id}.xlsx', excel_file.getvalue(), 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
        email.send()
        print(f'üì© Email —Å –∑–∞–∫–∞–∑–æ–º {order.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {order.email}')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email –∑–∞–∫–∞–∑–∞ {order_id}: {str(e)}')
        self.retry(exc=e, coutdown=5)



@shared_task(bind=True)
def notify_telegram(self, order_id):
    print(f'–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ —Å ID {order_id}')
    try:
        order = Order.objects.get(id=order_id)
        order_items = order.items.all()

        items_text = '\n'.join(
            [f'{item.product.name} ‚Äî {item.quantity} —à—Ç. ‚Äî {item.price}‚ÇΩ' for item in order_items]
        )

        message = (
            f'üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n'
            f'üõÇ ID –∑–∞–∫–∞–∑–∞: {order.id}\n'
            f'üôç‚Äç‚ôÇÔ∏è –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {order.first_name}\n'
            f'üì§ Email: {order.email}\n'
            f'üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone_number}\n\n'
            f'üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n{items_text}'
        )

        authorized_users = TelegramUser.objects.values_list('chat_id', flat=True)
        for chat_id in authorized_users:
            send_telegram_message(message)
        print(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}')

    except ObjectDoesNotExist:
        error_message=f'‚ùå –ó–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω'
        authorized_users = TelegramUser.objects.values_list('chat_id', flat=True)
        for chat_id in authorized_users:
            send_telegram_message(f'‚ùå –ó–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω')
        print(f'–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω')


