import telebot
import os
import sys
import django
from dotenv import load_dotenv
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'poligon_it.settings')
django.setup()

from orders.models import Order, OrderItem

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv('TOKEN')
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

STATUS_CHOICES = {
    'pending': '–û–∂–∏–¥–∞–Ω–∏–µ',
    'approved': '–ü–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω',
    'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω'
}

ORDERS_PER_PAGE = 5
user_pages = {}

@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, '–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç RE-AGENT üëã\n–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ –ø—Ä—è–º–æ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞!\n\n–ö–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ,\n–ò –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ\n–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ - \n\n/orders - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤\n/find - –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑ –ø–æ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞, –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ')

@bot.message_handler(commands=['orders'])
def order_list(message, page=1):
    user_pages[message.chat.id] = page
    orders = Order.objects.all()[(page-1)*ORDERS_PER_PAGE:page*ORDERS_PER_PAGE]
    markup = InlineKeyboardMarkup()
    
    orders = Order.objects.all()
    for order in orders:
        markup.add(InlineKeyboardButton(
            text = f'‚úÖ –ó–∞–∫–∞–∑ #{order.id} - {order.status_of_order}',
            callback_data=f'order_{order.id}'
        ))
    
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'page_{page-1}'))
    if Order.objects.count() > page * ORDERS_PER_PAGE:
        nav_buttons.append(InlineKeyboardButton("üîú –í–ø–µ—Ä–µ–¥", callback_data=f'page_{page+1}'))
    if nav_buttons:
        markup.add(*nav_buttons)

    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ üìí', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('page_'))
def paginate(call):
    page = int(call.data.split('_')[1])
    bot.delete_message(call.message.chat.id, call.message.message_id)
    order_list(call.message, page)

@bot.callback_query_handler(func=lambda call: call.data.startswith('order_'))
def show_order_details(call):
    order_id = int(call.data.split('_')[1])
    try:
        order = Order.objects.get(id=order_id)
        order_items = OrderItem.objects.filter(order=order)
        items_text = '\n'.join(
            [f'{item.product.name} - {item.quantity} —à—Ç. - {item.price} —Ä—É–±–ª–µ–π' for item in order_items]
        )

        details = (
            f'üìÉ –ó–∞–∫–∞–∑: #{order.id}\nüôç‚Äç‚ôÇÔ∏è –ö–ª–∏–µ–Ω—Ç: {order.first_name}\nüì§ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: {order.email}\nüì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {order.phone_number}\nüíµ –û–ø–ª–∞—á–µ–Ω: {"–î–∞" if order.is_paid else "–ù–µ—Ç"}\n\nüì¶ –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n{items_text}'
        )
        
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(
            text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞",
            callback_data=f'change_status_{order.id}'
        ))
        bot.send_message(call.message.chat.id, details, reply_markup=markup)

    except Order.DoesNotExist:
        bot.send_message(call.message.chat.id, '‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω')


@bot.message_handler(commands=['find'])
def find_order(message):
    bot.send_message(message.chat.id, "üîç –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ ID –∑–∞–∫–∞–∑–∞:")

@bot.message_handler(func=lambda message:True)
def find_results(message):
    query = message.text.strip()


    results = Order.objects.filter(
        first_name__icontains=query
    ) | Order.objects.filter(
        phone_number__icontains=query
    ) | Order.objects.filter(
        id__icontains=query
    )

    if results.exists():
        markup = InlineKeyboardMarkup()
        for order in results[:5]:
            markup.add(InlineKeyboardButton(
                text=f'‚úÖ –ó–∞–∫–∞–∑ #{order.id} - {order.status_of_order}',
                callback_data=f'order_{order.id}'
            ))
        bot.send_message(message.chat.id, 'üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: ', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')


@bot.callback_query_handler(func=lambda call: call.data.startswith('change_status_'))
def change_status(call):
    order_id = int(call.data.split("_")[2])
    markup = InlineKeyboardMarkup()
    
    for status, label in STATUS_CHOICES.items():
        markup.add(InlineKeyboardButton(
            text=label,
            callback_data=f"set_status_{order_id}_{status}"
        ))

    bot.edit_message_text(
        'üÜï –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:',
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('set_status_'))
def set_status(call):
    data = call.data.split("_")
    order_id = int(data[2])
    new_status = data[3]

    try:
        order = Order.objects.get(id=order_id)
        order.status_of_order = new_status
        order.save()

        bot.edit_message_text(
            f'üîÑ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order.id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "{STATUS_CHOICES[new_status]}"',
            call.message.chat.id,
            call.message.message_id
        )
    except Order.DoesNotExist:
        bot.send_message(call.message.chat.id, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞')


print('Bot runned and listen commands')

bot.polling(none_stop=True)