import logging
import telebot
import time
import requests
import re
import os
import sys
import django
from dotenv import load_dotenv
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from telebot import apihelper
from django.db.utils import IntegrityError

logging.basicConfig(filename="bot_logs.txt", level=logging.INFO, format=f"%(asctime)s - %(message)s")



sys.path.append(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))



os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'poligon_it.settings')
django.setup()

#importing django

from orders.models import Order, OrderItem
from emailsender.utils import send_mass_mail
from tg_bot.models import TelegramUser, ProductOrder, UserQuestion

load_dotenv()

# settings

TELEGRAM_BOT_TOKEN = os.getenv('TOKEN')
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

BOT_PASSWORD = os.getenv('BOT_PASSWORD')
ADMIN_IDS = list(map(int, os.getenv("ADMINS", "").split(","))) if os.getenv("ADMINS") else []

STATUS_CHOICES = {
    'pending': '–û–∂–∏–¥–∞–Ω–∏–µ',
    'approved': '–ü–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω',
    'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω'
}



ORDERS_PER_PAGE = 5
user_pages = {}
user_data = {}
order_data = {}
questions_timestamps = {}



# start code

@bot.message_handler(commands=['start'])
def start_message(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üîé –ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä"))
    markup.add(KeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"))

    bot.send_message(
        message.chat.id,
        "üëã –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–ø–∞–Ω–∏—è Re-Agent. –í—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.\n–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä,\n–∫–æ—Ç–æ—Ä–æ–≥–æ —É –Ω–∞—Å –Ω–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ.–¢–∞–∫–∂–µ, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å,\n–∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text == "üîé –ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä")
def order_product(message):
    bot.send_message(message.chat.id, "üìÉ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤):")
    bot.register_next_step_handler(message, get_name)

def get_name(message):
    chat_id = message.chat.id
    name = message.text.strip()

    if not re.match(r"^[–ê-–Ø–∞-—èA-Za-z\s-]{2,50}$", name):
        bot.send_message(chat_id, "üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è! –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:")
        bot.register_next_step_handler(message, get_name)
        return

    order_data[chat_id] = {"name": name}
    bot.send_message(chat_id, "üõí –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤):")
    bot.register_next_step_handler(message, get_product_name)

def get_product_name(message):
    chat_id = message.chat.id
    product_name = message.text.strip()

    if len(product_name) < 2 or len(product_name) > 100:
        bot.send_message(chat_id, "üö´ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ! –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:")
        bot.register_next_step_handler(message, get_product_name)
        return

    order_data[chat_id]["product_name"] = product_name
    bot.send_message(chat_id, "üî¢ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (–æ—Ç 1 –¥–æ 1000):")
    bot.register_next_step_handler(message, get_quantity)

def get_quantity(message):
    chat_id = message.chat.id
    try:
        quantity = int(message.text.strip())
        if quantity < 1 or quantity > 1000:
            raise ValueError
    except ValueError:
        bot.send_message(chat_id, "üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 1000:")
        bot.register_next_step_handler(message, get_quantity)
        return

    order_data[chat_id]["quantity"] = quantity
    bot.send_message(chat_id, "üìû –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ email):")
    bot.register_next_step_handler(message, get_contact)

def get_contact(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üîé –ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä"))
    markup.add(KeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"))

    chat_id = message.chat.id
    contact_info = message.text.strip()

    phone_regex = r"^\+?\d{10,15}$" 
    email_regex = r"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$"  

    if not re.match(phone_regex, contact_info) and not re.match(email_regex, contact_info):
        bot.send_message(chat_id, "üö´ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567) –∏–ª–∏ email:")
        bot.register_next_step_handler(message, get_contact)
        return

    order_data[chat_id]["contact_info"] = contact_info

    order = ProductOrder.objects.create(**order_data[chat_id])

    bot.send_message(chat_id, f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n\n"
                              f"üë§ –ò–º—è: {order.name}\n"
                              f"üì¶ –¢–æ–≤–∞—Ä: {order.product_name}\n"
                              f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order.quantity}\n"
                              f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {order.contact_info}", reply_markup=markup)

    notify_admins(order)

    del order_data[chat_id]

@bot.message_handler(func=lambda message: message.text == "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
def ask_question(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üîé –ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä"))
    markup.add(KeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"))

    chat_id = message.chat.id

    last_question_time = questions_timestamps.get(chat_id, 0)
    if time.time() - last_question_time < 30:
        bot.send_message(chat_id, "‚è≥ –í—ã –Ω–µ–¥–∞–≤–Ω–æ —É–∂–µ –∑–∞–¥–∞–≤–∞–ª–∏ –≤–æ–ø—Ä–æ—Å. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º.", reply_markup=markup)
        return
    
    bot.send_message(chat_id, "‚úè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
    bot.register_next_step_handler(message, save_question)

def save_question(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üîé –ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä"))
    markup.add(KeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"))

    chat_id = message.chat.id
    username = message.from_user.username
    question_text = message.text.strip()

    if len(question_text) < 5 or len(question_text) > 500:
        bot.send_message(chat_id, "‚ùó –í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 5 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤.")
        bot.register_next_step_handler(message, save_question)
        return

    if re.search(r'[<>/\|{}]+', question_text):
        bot.send_message(chat_id, "üö´ –í–∞—à –≤–æ–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        bot.register_next_step_handler(message, save_question)
        return

    question = UserQuestion.objects.create(
        chat_id=chat_id,
        username=username,
        question_text=question_text
    )

    questions_timestamps[chat_id] = time.time()

    bot.send_message(chat_id, "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=markup)

    notify_admins_about_question(question)

def notify_admins_about_question(question):
    staff = TelegramUser.objects.all()
    if not staff.exists():
        return
    
    
    message_text = (f"üì© –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{question.username or question.chat_id}:\n\n"
                        f"üí¨ {question.question_text}")
    
    for officer in staff:
        bot.send_message(officer.chat_id, message_text)


def is_authorized(chat_id):
    return TelegramUser.objects.filter(chat_id=chat_id).exists()

def is_admin(chat_id):
    return TelegramUser.objects.filter(chat_id=chat_id, is_admin=True).exists() or chat_id in ADMIN_IDS

@bot.message_handler(commands=['login'])
def start_message(message):
    if is_authorized(message.chat.id):
        bot.send_message(message.chat.id, "‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!")
    else:
        bot.send_message(message.chat.id, "üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å!")


@bot.message_handler(func=lambda message: not is_authorized(message.chat.id))
def check_password(message):
    if message.text.strip() == BOT_PASSWORD:
        try:
            TelegramUser.objects.create(chat_id=message.chat.id, username=message.from_user.username)
            bot.send_message(message.chat.id, "üîì –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –≤–∞–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!")
        except IntegrityError:
            bot.send_message(message.chat.id, "‚ö† –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö! –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    else:
        bot.send_message(message.chat.id, "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")


# def main_menu_keyboard():
#     keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
#     keyboard.add(KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
#     keyboard.add(KeyboardButton("üîé –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞"))
#     keyboard.add(KeyboardButton("üìÉ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤"))
#     return keyboard

# @bot.message_handler(func=lambda message: message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
# def main_menu(message):
#     bot.send_message(message.chat.id, "üìå –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!", reply_markup=main_menu_keyboard())
#     start_message_after_authorization()

# @bot.message_handler(func=lambda message: message.text == "üîé –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞")
# def find_orders(message):
#     bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ ID –∑–∞–∫–∞–∑–∞:")
#     find_order(message)

# @bot.message_handler(func=lambda message: message.text == "üìÉ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤")
# def list_orders(message):
#     order_list(message)

def notify_admins(order):
    staff = TelegramUser.objects.all()
    if not staff.exists():
        return
    
    
    message_text = (f"üì¢ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
                    f"üë§ –ò–º—è: {order.name}\n"
                    f"üì¶ –¢–æ–≤–∞—Ä: {order.product_name}\n"
                    f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order.quantity}\n"
                    f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {order.contact_info}")
    
    for officer in staff:
        bot.send_message(officer.chat_id, message_text)

@bot.message_handler(commands=['help'])
def start_message_after_authorization(message):
    if not is_authorized(message.chat.id):
        bot.send_message(message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!")
        return
    
    bot.send_message(message.chat.id, '–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç RE-AGENT üëã\n–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ –ø—Ä—è–º–æ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞!\n\n–ö–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ,\n–ò –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ\n–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ - \n\n/orders - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤\n/find - –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑ –ø–æ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞, –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ\n/send_email - –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ —É–∫–∞–∑—ã–≤–∞–ª–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É!')


@bot.message_handler(commands=['send_email'])
def ask_subjcet(message:Message):
    if not is_authorized(message.chat.id):
        bot.send_message(message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É!")
        return
    
    bot.send_message(message.chat.id, 'üìå –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏:')
    bot.register_next_step_handler(message, ask_message)

def ask_message(message:Message):
    user_data[message.chat.id] = {"subject": message.text.strip()}
    bot.send_message(message.chat.id, "‚úâ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")
    bot.register_next_step_handler(message, send_mail)

def send_mail(message:Message):
    chat_id = message.chat.id
    if chat_id not in user_data:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ /send_mail")
        return
    
    user_data[chat_id]["message"] = message.text.strip()

    subject = user_data[chat_id]["subject"]
    body = user_data[chat_id]["message"]
    send_mass_mail(subject, body)

    bot.send_message(chat_id, '‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!')

    del user_data[chat_id]


@bot.message_handler(commands=['orders'])
def order_list(message, page=1):
    if not is_authorized(message.chat.id):
        bot.send_message(message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É!")
        return
    
    user_pages[message.chat.id] = page
    total_orders = Order.objects.count()
    orders = Order.objects.all()[(page-1)*ORDERS_PER_PAGE:page*ORDERS_PER_PAGE]
    markup = InlineKeyboardMarkup()

    for order in orders:
        markup.add(InlineKeyboardButton(
            text = f'‚úÖ –ó–∞–∫–∞–∑ #{order.id} - {order.status_of_order}',
            callback_data=f'order_{order.id}'
        ))
    
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'page_{page-1}'))
    if Order.objects.count() > page * ORDERS_PER_PAGE:
        nav_buttons.append(InlineKeyboardButton("üîú –í–ø–µ—Ä–µ–¥", callback_data=f'page_{page+1}'))
    if nav_buttons:
        markup.add(*nav_buttons)

    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ üìí', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('page_'))
def paginate(call):
    page = int(call.data.split('_')[1])
    bot.delete_message(call.message.chat.id, call.message.message_id)
    order_list(call.message, page)

@bot.callback_query_handler(func=lambda call: call.data.startswith('order_'))
def show_order_details(call):
    order_id = int(call.data.split('_')[1])
    try:
        order = Order.objects.get(id=order_id)
        order_items = OrderItem.objects.filter(order=order)
        items_text = '\n'.join(
            [f'{item.product.name} - {item.quantity} —à—Ç. - {item.price} —Ä—É–±–ª–µ–π' for item in order_items]
        )

        details = (
            f'üìÉ –ó–∞–∫–∞–∑: #{order.id}\nüôç‚Äç‚ôÇÔ∏è –ö–ª–∏–µ–Ω—Ç: {order.first_name}\nüì§ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: {order.email}\nüì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {order.phone_number}\nüíµ –û–ø–ª–∞—á–µ–Ω: {"–î–∞" if order.is_paid else "–ù–µ—Ç"}\n\nüì¶ –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n{items_text}'
        )
        
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(
            text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞",
            callback_data=f'change_status_{order.id}'
        ))
        bot.send_message(call.message.chat.id, details, reply_markup=markup)

    except Order.DoesNotExist:
        bot.send_message(call.message.chat.id, '‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω')

@bot.message_handler(commands=['add_admin'])
def add_admin(message):
    if message.chat.id not in ADMIN_IDS:
        bot.send_message(message.chat.id, 'üö´ –¢–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É')
        return

    try:
        user_id = int(message.text.split()[1])
        user = TelegramUser.objects.get(chat_id=user_id)
        user.is_admin = True
        user.save()
        bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
    except (IndexError, ValueError):
        bot.send_message(message.chat.id, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_admin ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except TelegramUser.DoesNotExist:
        bot.send_message(message.chat.id, "üôç‚Äç‚ôÇÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.chat.id not in ADMIN_IDS:
        bot.send_message(message.chat.id, 'üö´ –¢–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É')
        return
    
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üìÉ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤", callback_data="view_logs"))
    markup.add(InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="view_users"))
    markup.add(InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="delete_user"))
    
    bot.send_message(message.chat.id, "‚ô¶ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "view_logs")
def view_logs(call):
    if call.message.chat.id not in ADMIN_IDS:
        bot.send_message(call.message.chat.id, 'üö´ –¢–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É')
        return
    try:
        with open("bot_logs.txt", "r") as log_file:
            logs = log_file.readlines()[-10:]
        logs_text = "".join(logs) if logs else "–õ–æ–≥–∏ –ø—É—Å—Ç—ã"
    except FileNotFoundError:
        logs_text = "–§–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"
    
    bot.send_message(call.message.chat.id, f'üìÉ –õ–æ–≥–∏:\n\n{logs_text}')

@bot.callback_query_handler(func=lambda call: call.data == "view_users")
def view_logs(call):
    if call.message.chat.id not in ADMIN_IDS:
        bot.send_message(call.message.chat.id, 'üö´ –¢–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É')
        return
    
    users = TelegramUser.objects.all()
    users_text = "\n".join([f'{u.username or u.chat_id} (ID: {u.chat_id})' for u in users]) or "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!"

    bot.send_message(call.message.chat.id, f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: \n\n{users_text}")

@bot.message_handler(commands=['remove_user'])
def remove_user(message):
    if message.chat.id not in ADMIN_IDS:
        bot.send_message(message.chat.id, 'üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!')
        return
    try:
        user_id = int(message.text.split()[1])  
        user = TelegramUser.objects.get(chat_id=user_id)
        user.delete()  
        bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
    except (IndexError, ValueError):
        bot.send_message(message.chat.id, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: `/remove_user ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`", parse_mode="Markdown")
    except TelegramUser.DoesNotExist:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")

@bot.message_handler(commands=['remove_admin'])
def remove_admin(message):
    if message.chat.id not in ADMIN_IDS:
        bot.send_message(message.chat.id, 'üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!')
        return

    try:
        user_id = int(message.text.split()[1])  
        user = TelegramUser.objects.get(chat_id=user_id)

        if not user.is_admin:
            bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
            return
        
        user.is_admin = False  
        user.save()

        bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
    except (IndexError, ValueError):
        bot.send_message(message.chat.id, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: `/remove_admin ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`", parse_mode="Markdown")
    except TelegramUser.DoesNotExist:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")

@bot.callback_query_handler(func=lambda call: call.data == "delete_user")
def delete_user_prompt(call):
    if call.message.chat.id not in ADMIN_IDS:
        bot.send_message(call.message.chat.id, 'üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!')
        return

    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ `ID` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    bot.register_next_step_handler(call.message, remove_user)


@bot.message_handler(commands=['find'])
def find_order(message):
    if not is_authorized(message.chat.id):
        bot.send_message(message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É!")
        return
    
    bot.send_message(message.chat.id, "üîç –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ ID –∑–∞–∫–∞–∑–∞:")

@bot.message_handler(func=lambda message:True)
def find_results(message):
    query = message.text.strip()


    results = Order.objects.filter(
        first_name__icontains=query
    ) | Order.objects.filter(
        phone_number__icontains=query
    ) | Order.objects.filter(
        id__icontains=query
    )

    if results.exists():
        markup = InlineKeyboardMarkup()
        for order in results[:5]:
            markup.add(InlineKeyboardButton(
                text=f'‚úÖ –ó–∞–∫–∞–∑ #{order.id} - {order.status_of_order}',
                callback_data=f'order_{order.id}'
            ))
        bot.send_message(message.chat.id, 'üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: ', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')


@bot.callback_query_handler(func=lambda call: call.data.startswith('change_status_'))
def change_status(call):
    order_id = int(call.data.split("_")[2])
    markup = InlineKeyboardMarkup()
    
    for status, label in STATUS_CHOICES.items():
        markup.add(InlineKeyboardButton(
            text=label,
            callback_data=f"set_status_{order_id}_{status}"
        ))

    bot.edit_message_text(
        'üÜï –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:',
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('set_status_'))
def set_status(call):
    from orders.tasks import send_order_email_task

    data = call.data.split("_")
    order_id = int(data[2])
    new_status = data[3]

    try:
        order = Order.objects.get(id=order_id)
        order.status_of_order = new_status

        if new_status == "approved":
            order.is_paid = True
            send_order_email_task.delay(order_id)
            
        order.save()

        bot.edit_message_text(
            f'üîÑ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order.id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "{STATUS_CHOICES[new_status]}"',
            call.message.chat.id,
            call.message.message_id,
            
        )
    except Order.DoesNotExist:
        bot.send_message(call.message.chat.id, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞')

def log_event(event_text):
    logging.info(event_text)

@bot.message_handler(func=lambda message: True, content_types=['text'])
def log_messages(message):
    log_event(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.chat.id}: {message.text}")
    bot.process_new_messages([message])


print('Bot runned and listen commands')

def run_bot():
    retries = 5
    for i in range(retries):
        try:
            bot.polling(none_stop=True)
            break
        except apihelper.ApiException as e:
            logging.error(f'Telegram API error: {e}')
            if i < retries - 1:
                logging.info('Try to restart start at 10 seconds...')
                time.sleep(10)
            else:
                logging.critical('Exceeded the number of restart attempts')
                raise
        except requests.exceptions.ReadTimeout as e:
            logging.error(f'Error of timeout: {e}')
            if i < retries - 1:
                logging.info('Try to restart at 10 seconds...')
                time.sleep(10)
            else:
                logging.critical('Exceeded the number of restart attempts')
                raise


if __name__=='__main__':
    run_bot()
